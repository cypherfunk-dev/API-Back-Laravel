/* tslint:disable */
/* eslint-disable */
/**
 * API Tejidos Artesanales
 * API para sistema de gestión de productos y servicios de tejidos artesanales 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: soporte@tejidosartesanales.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * 
     * @type {number}
     * @memberof Color
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Color
     */
    'hex_code'?: string;
}
/**
 * 
 * @export
 * @interface GetAllItems200Response
 */
export interface GetAllItems200Response {
    /**
     * 
     * @type {Array<ItemWithVariants>}
     * @memberof GetAllItems200Response
     */
    'data'?: Array<ItemWithVariants>;
    /**
     * 
     * @type {Pagination}
     * @memberof GetAllItems200Response
     */
    'meta'?: Pagination;
}
/**
 * 
 * @export
 * @interface InventoryWithDetails
 */
export interface InventoryWithDetails {
    /**
     * 
     * @type {number}
     * @memberof InventoryWithDetails
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryWithDetails
     */
    'price'?: number;
    /**
     * 
     * @type {Size}
     * @memberof InventoryWithDetails
     */
    'size'?: Size;
    /**
     * 
     * @type {Color}
     * @memberof InventoryWithDetails
     */
    'color'?: Color;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'sku': number;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'status'?: ItemStatusEnum;
}

export const ItemStatusEnum = {
    Active: 'active',
    Inactive: 'inactive'
} as const;

export type ItemStatusEnum = typeof ItemStatusEnum[keyof typeof ItemStatusEnum];

/**
 * 
 * @export
 * @interface ItemWithVariants
 */
export interface ItemWithVariants {
    /**
     * 
     * @type {number}
     * @memberof ItemWithVariants
     */
    'sku': number;
    /**
     * 
     * @type {string}
     * @memberof ItemWithVariants
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ItemWithVariants
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemWithVariants
     */
    'status'?: ItemWithVariantsStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ItemWithVariants
     */
    'min_price'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ItemWithVariants
     */
    'available_colors'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ItemWithVariants
     */
    'available_sizes'?: Array<string>;
}

export const ItemWithVariantsStatusEnum = {
    Active: 'active',
    Inactive: 'inactive'
} as const;

export type ItemWithVariantsStatusEnum = typeof ItemWithVariantsStatusEnum[keyof typeof ItemWithVariantsStatusEnum];

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'per_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'current_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'last_page'?: number;
}
/**
 * 
 * @export
 * @interface Size
 */
export interface Size {
    /**
     * 
     * @type {number}
     * @memberof Size
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Size
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Size
     */
    'code'?: string;
}

/**
 * InventarioApi - axios parameter creator
 * @export
 */
export const InventarioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listar variantes de inventario
         * @param {number} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemInventory: async (sku: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('getItemInventory', 'sku', sku)
            const localVarPath = `/items/{sku}/inventory`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventarioApi - functional programming interface
 * @export
 */
export const InventarioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InventarioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listar variantes de inventario
         * @param {number} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemInventory(sku: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InventoryWithDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemInventory(sku, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventarioApi.getItemInventory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InventarioApi - factory interface
 * @export
 */
export const InventarioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InventarioApiFp(configuration)
    return {
        /**
         * 
         * @summary Listar variantes de inventario
         * @param {number} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemInventory(sku: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<InventoryWithDetails>> {
            return localVarFp.getItemInventory(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventarioApi - object-oriented interface
 * @export
 * @class InventarioApi
 * @extends {BaseAPI}
 */
export class InventarioApi extends BaseAPI {
    /**
     * 
     * @summary Listar variantes de inventario
     * @param {number} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventarioApi
     */
    public getItemInventory(sku: number, options?: RawAxiosRequestConfig) {
        return InventarioApiFp(this.configuration).getItemInventory(sku, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductosApi - axios parameter creator
 * @export
 */
export const ProductosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Listar todos los productos
         * @param {number} [page] Número de página
         * @param {number} [limit] Límite de items por página
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItems: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtener producto específico
         * @param {number} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemBySku: async (sku: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sku' is not null or undefined
            assertParamExists('getItemBySku', 'sku', sku)
            const localVarPath = `/items/{sku}`
                .replace(`{${"sku"}}`, encodeURIComponent(String(sku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductosApi - functional programming interface
 * @export
 */
export const ProductosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Listar todos los productos
         * @param {number} [page] Número de página
         * @param {number} [limit] Límite de items por página
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllItems(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllItems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllItems(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductosApi.getAllItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Obtener producto específico
         * @param {number} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemBySku(sku: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemWithDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemBySku(sku, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductosApi.getItemBySku']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductosApi - factory interface
 * @export
 */
export const ProductosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductosApiFp(configuration)
    return {
        /**
         * 
         * @summary Listar todos los productos
         * @param {number} [page] Número de página
         * @param {number} [limit] Límite de items por página
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItems(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetAllItems200Response> {
            return localVarFp.getAllItems(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtener producto específico
         * @param {number} sku 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemBySku(sku: number, options?: RawAxiosRequestConfig): AxiosPromise<ItemWithDetails> {
            return localVarFp.getItemBySku(sku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductosApi - object-oriented interface
 * @export
 * @class ProductosApi
 * @extends {BaseAPI}
 */
export class ProductosApi extends BaseAPI {
    /**
     * 
     * @summary Listar todos los productos
     * @param {number} [page] Número de página
     * @param {number} [limit] Límite de items por página
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosApi
     */
    public getAllItems(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ProductosApiFp(this.configuration).getAllItems(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtener producto específico
     * @param {number} sku 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductosApi
     */
    public getItemBySku(sku: number, options?: RawAxiosRequestConfig) {
        return ProductosApiFp(this.configuration).getItemBySku(sku, options).then((request) => request(this.axios, this.basePath));
    }
}



